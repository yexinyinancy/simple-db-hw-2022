package simpledb.execution;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

import java.io.FileReader;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import simpledb.common.Type;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    private JoinPredicate p_;
    private OpIterator child1_;
    private OpIterator child2_;
    Tuple left;
    Tuple right;

    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // TODO: some code goes here
        this.p_ = p;
        this.child1_ = child1;
        this.child2_ = child2;
        this.left = null;
        this.right = null;
    }

    public JoinPredicate getJoinPredicate() {
        // TODO: some code goes here
        return this.p_;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        // TODO: some code goes here
        return child1_.getTupleDesc().getFieldName(p_.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        // TODO: some code goes here
        return child2_.getTupleDesc().getFieldName(p_.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *         implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // TODO: some code goes here
        return TupleDesc.merge(child1_.getTupleDesc(), child2_.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // TODO: some code goes here
        super.open();
        child1_.open();
        child2_.open();
        if (child1_.hasNext()) {
            left = child1_.next();
        }
        if (child2_.hasNext()) {
            right = child2_.next();
        }
    }

    public void close() {
        // TODO: some code goes here
        child1_.close();
        child2_.close();
        left = null;
        right = null;
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // TODO: some code goes here
        this.close();
        this.open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // TODO: some code goes here
        while (left != null || right != null) {
            Tuple next = null;
            if (p_.filter(left, right)) {
                next = new Tuple(this.getTupleDesc());
                for (int i = 0; i < this.getTupleDesc().numFields() ; i++) {
                    if (i < left.getTupleDesc().numFields()) {
                        next.setField(i, left.getField(i));
                    } else {
                        next.setField(i, right.getField(i - left.getTupleDesc().numFields()));
                    }
                }
            }
            if (child2_.hasNext()) {
                right = child2_.next();
            }
            else {
                if (child1_.hasNext()) {
                    left = child1_.next();
                    child2_.rewind();
                    if (child2_.hasNext()) {
                        right = child2_.next();
                    }
                } else {
                    left = null;
                    right = null;
                }
            }
            if (next != null) {
                return next;
            }
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // TODO: some code goes here
        return new OpIterator[]{child1_, child2_};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // TODO: some code goes here
        child1_ = children[0];
        child2_ = children[1];
    }

}
